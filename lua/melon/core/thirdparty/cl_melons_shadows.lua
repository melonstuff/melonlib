---
--- Melon's Shadows
--- Can be found at:
--- https://github.com/melonstuff/melonsshadows/
---

local shadows = {}

shadows.RenderTarget = GetRenderTarget("MelonsShadows", ScrW(), ScrH())shadows.Material = CreateMaterial("MelonsShadows", "UnlitGeneric", {["$basetexture"] = shadows.RenderTarget:GetName(),["$transparent"] = "1",["$color"] = "1",["$vertexalpha"] = "1",["$alpha"] = "1"})shadows.Current = false shadows.LastRendered = false function shadows.Start(name)if shadows.LastRendered and (shadows.LastRendered == name) and shadows.Current then shadows.Render()return false end shadows.LastRendered = name shadows.Current = {opacity = 255,intensity = 1,spread = 5,blur = 1,relative = false,at_x = 0,at_y = 0,xoffset = 0,yoffset = 0 }shadows.Material:SetFloat("$alpha", 1)render.PushRenderTarget(shadows.RenderTarget)render.Clear(0, 0, 0, 0)cam.Start2D()return true end function shadows.End()local c = shadows.Current if not c then debug.Trace()return Error("[MelonsShadows] Attempting to end a shadow that hasnt been started\n")end if c.blur != 0 then render.BlurRenderTarget(shadows.RenderTarget, c.spread, c.spread, c.blur)end render.PopRenderTarget()shadows.Render()cam.End2D()end function shadows.Render()local c = shadows.Current shadows.Material:SetFloat("$alpha", c.opacity / 255)render.SetMaterial(shadows.Material)local x, y = 0, 0 local w, h = ScrW(), ScrH()if IsValid(c.relative) then x, y = c.relative:LocalToScreen(0, 0)x = x - c.at_x y = y - c.at_y end x = x + c.xoffset y = y + c.yoffset for i = 0, c.intensity do render.DrawScreenQuadEx(x, y, w, h)end end function shadows.StateAccessor(key)return function(value)shadows.Current[key] = value end end function shadows.Dirty()shadows.LastRendered = false end shadows.SetOpacity = shadows.StateAccessor("opacity")shadows.SetIntensity = shadows.StateAccessor("intensity")shadows.SetSpread = shadows.StateAccessor("spread")shadows.SetBlur = shadows.StateAccessor("blur")shadows.SetRelative = shadows.StateAccessor("relative")function shadows.SetRenderedAt(x, y)shadows.Current.at_x = x shadows.Current.at_y = y end function shadows.SetOffset(x, y)shadows.Dirty()shadows.Current.xoffset = x shadows.Current.yoffset = y end 

melon.thirdparty = melon.thirdparty or {}
melon.thirdparty.Shadows = shadows